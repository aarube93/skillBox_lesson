public class Notice {
    //Абстрактные классы - это классы, которые можно наследовать, но на их основе нельзя создавать объекты, кроме того,
// в таких классах могут быть абстрактные методы - методы, которые не содержат реализацию и, которые нужно
// реализовывать в классах наследниках.
        //Абстрактный класс или метод объявляется с помощью ключевого слова abstract.
        //В них могут содержаться абстрактные методы которые ОбЯЗАТЕЛЬНО реализовывать в дочерних классах.

//Зачем нужны абстрактные классы:
        //1. Объединять в одном месте функционал, который свойственен другим классам и должен быть доступен в них
        //2. Для определения функционала который ОБЯЗАТЕЛЬНО должен быть реализован в дочерних классах,
    // но в каждом таком классе реализация должна быть разная
        //3. При отсутствии смысла создавать объекты таких классов - например объект
        //несуществующего осветительного прибора

    //Более высокие уровни абстракции классов - это интерфейсы. В языках программирования интерфейс это не привычное нам
//значение "интерфейс графический", где с интерфейсом взаимодействует некий пользователь, в программировании это
// структуры в программном коде, такие же как классы или абстрактные классы. Интерфейсы, так же ак и абстрактные классы,
//могут определять методы которые должны реализовываться в дочерних кассах, и это единственное чем они похожи на
//абстрактные классы. Что бы имплементировать интерфейс используется ключевое слово implement, которое пишется после
//названия класса в который мы добавляем интерфейс. Имплементировать можно несколько интерфейсов в 1 класс.
    //В отличие от абстрактных классов интерфейсы не могут содержать реализацию методов, а также не могу содержать
    // конструкторы и переменные(за некоторыми исключениями):
        //- Могут создаваться константы
        //- Могут создаваться статические методы
        //- Могут быть реализованы т.н. дефолт-метод
//Заметка выше относится к поведенческим интерфейсам, то есть к таким, которые устанавливают общий набор методов
//для всех классов наследников. Ниже заметка будет относиться к маркерным интерфейсам, эти интерфейсы не содержат ни
//одного метода и используются для того что бы помечать, то есть маркирОвать классы определенным образом в языке JAVA
//есть несколько таких интерфейсов:
                        //-LIST
                        //-COLLECTION
                        //-COMPARABLE
//Сериализация и десериализация - преобразование объекта из памяти джава-машины в последовательность байтов и обратно,
//например в файл.

    //Полиморфизм:
//И так, что же такое ПОЛИМОРФИЗМ - В примере с умным домом это свойство системы благодаря которой мы знаем что у всех
//приборов в умном доме есть некоторый набор универсальных методов и, следовательно, некоторое универсальное поведение,
//при том, что все приборы разные. ПОЛИ - это много, а МОРФО - ФОРМА - значит это многообразие форм.
    //Полиморфизм это один из принципов объектно ориентированного программирования.  В соответствии с этим признаком
//разные классы имеющие одну спецификацию, то есть один набор методов, могут иметь разную реализацию.
//В нашем примере мы использовали этот принцип для работы с устройствами, задали по средствам интерфейса метод
//switchOff для всех устройств и тем самым реализовали возможность все их выключать не проверяя к какому
//классу какое устройство относится.

    //Вложенные классы.
//Это классы, которые могут быть созданы внутри других классов - статические вложенные классы и не статические
//вложенные классы, это классы, которые можно создавать прямо внутри метода - локальные классы и анонимные классы


}


