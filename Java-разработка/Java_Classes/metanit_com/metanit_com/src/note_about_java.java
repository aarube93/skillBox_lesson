public class note_about_java {

    /**
     Вывод информации через спецификаторы в методе System.out. :
     int x=5;
     int y=6;
     System.out.printf("x=%d; y=%d \n", x, y);

     В данном случае символы %d обозначают спецификатор, вместо которого подставляет один из аргументов.
     Спецификаторов и соответствующих им аргументов может быть множество.
     В данном случае у нас только два аргумента, поэтому вместо первого %d подставляет значение
     переменной x, а вместо второго - значение переменной y. Сама буква d означает, что данный
     спецификатор будет использоваться для вывода целочисленных значений.

     Кроме спецификатора %d мы можем использовать еще ряд спецификаторов для других типов данных:

     %x: для вывода шестнадцатеричных чисел

     %f: для вывода чисел с плавающей точкой

     %e: для вывода чисел в экспоненциальной форме, например, 1.3e+01

     %c: для вывода одиночного символа

     %s: для вывода строковых значений.
     */

    /**
     Лoгические операции
     Также в Java есть логические операции, которые также представляют условие и возвращают true или false
     и обычно объединяют несколько операций сравнения. К логическим операциям относят следующие:

     | :

     c=a|b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)

     &:

     c=a&b; (c равно true, если и a, и b равны true, иначе c будет равно false)

     !:

     c=!b; (c равно true, если b равно false, иначе c будет равно false)

     ^:

     c=a^b; (c равно true, если либо a, либо b (но не одновременно) равны true, иначе c будет равно false)

     ||:

     c=a||b; (c равно true, если либо a, либо b (либо и a, и b) равны true, иначе c будет равно false)

     &&

     c=a&&b; (c равно true, если и a, и b равны true, иначе c будет равно false)

     Здесь у нас две пары операций | и || (а также & и &&) выполняют похожие действия,
     однако же они не равнозначны.

     Выражение c=a|b; будет вычислять сначала оба значения - a и b и на их основе выводить результат.

     В выражении же c=a||b; вначале будет вычисляться значение a, и если оно равно true,
     то вычисление значения b уже смысла не имеет, так как у нас в любом случае уже c будет равно true.
     Значение b будет вычисляться только в том случае, если a равно false

     То же самое касается пары операций &/&&. В выражении c=a&b; будут вычисляться оба значения - a и b.

     В выражении же c=a&&b; сначала будет вычисляться значение a, и если оно равно false,
     то вычисление значения b уже не имеет смысла, так как значение c в любом случае равно false.
     Значение b будет вычисляться только в том случае, если a равно true

     Таким образом, операции || и && более удобны в вычислениях, позволяя сократить время на вычисление
     значения выражения и тем самым повышая производительность. А операции | и & больше подходят для
     выполнения поразрядных операций над числами.
     */

    /**
     В завершении рассмотрим операции присваивания, которые в основном представляют
     комбинацию простого присваивания с другими операциями:

     =

     просто приравнивает одно значение другому: c=b;

     +=

     c+=b; (переменной c присваивается результат сложения c и b)

     -=

     c-=b; (переменной c присваивается результат вычитания b из c)
     *=

     c*=b; (переменной c присваивается результат произведения c и b)

     /=

     c/=b; (переменной c присваивается результат деления c на b)

     %=

     c%=b; (переменной c присваивается остаток от деления c на b)

     &=

     c&=b; (переменной c присваивается значение c&b)

     |=

     c|=b; (переменной c присваивается значение c|b)

     ^=

     c^=b; (переменной c присваивается значение c^b)

     <<=

     c<<=b; (переменной c присваивается значение c<<b)

     >>=

     c>>=b; (переменной c присваивается значение c>>b)

     >>>=

     c>>>=b; (переменной c присваивается значение c>>>b)


     */

    /**
     *Тернарная операция:
     * int x=3;
     * int y=2;
     * int z = x<y? (x+y) : (x-y);
     * System.out.println(z);
     */
}
